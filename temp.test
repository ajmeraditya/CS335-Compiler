/* for(auto x:dot_declarations){
        fout<<x<<endl;
    }     */
    set<int> terminals;
    for(auto x:dot_edges){
        for(auto y:x.second){
            if(!dot_edges.count(y) || (dot_edges[parent[y]].size()==1 && dot_edges[y].size()>1)){
                terminals.insert(y);
                /* fout<<y<<" "; */
                
            }
        }
    }
    set<pair<int,int>> ast_edges;
    set<int> ast_nodes;
    for(int terminal: terminals){
        /* cout<<"terminal: "<<terminal<<endl; */
        int temp = terminal;
        while(dot_edges[parent[temp]].size()==1){
            /* fout<<temp<<" "; */
            temp = parent[temp];
        }
        temp = parent[temp];
        /* fout<<temp<<" "<<terminal<<": "; */
        /* if(temp != parentDecl) */
        /* for(auto allowed: dot_edges[temp]){
            ast_edges.insert({temp,allowed});
            ast_nodes.insert(allowed);
        } */
        ast_edges.insert({temp,terminal});
        ast_nodes.insert(temp);
        ast_nodes.insert(terminal);
    }
    ast_nodes.insert(parentDecl);
    for(auto x: ast_nodes) fout<<("\t" + to_string(x) + "\t\t[ style = solid label = \"" + storeValue[x] + "\"  ];\n");
    for(auto x: ast_edges){
        fout<<"\t"<<x.first<<" -> "<<x.second<<endl;
    }